{"version":3,"file":"lottie-interactivity.min.js","sources":["../src/main.js"],"sourcesContent":["const DEFAULT_OPTIONS = {\n  player: 'lottie-player',\n};\nconst LOTTIE_PLAYER_NODE = 'LOTTIE-PLAYER';\nconst ERROR_PREFIX = '[lottieInteractivity]:';\n\n/**\n * LottieFiles interactivity for Lottie\n */\nexport class LottieInteractivity {\n  constructor({ actions, container, mode, player, ...options } = DEFAULT_OPTIONS) {\n    // Resolve lottie instance specified in player option\n    if (!(typeof player === 'object' && player.constructor.name === 'AnimationItem')) {\n      if (typeof player === 'string') {\n        const elem = document.querySelector(player);\n\n        if (elem && elem.nodeName === LOTTIE_PLAYER_NODE) {\n          player = elem.getLottie();\n        }\n      } else if (player instanceof HTMLElement && player.nodeName === LOTTIE_PLAYER_NODE) {\n        player = player.getLottie();\n      }\n\n      // Throw error no player instance has been successfully resolved\n      if (!player) {\n        throw new Error(`${ERROR_PREFIX} Specified player is invalid.`, player);\n      }\n    }\n\n    // Get the configured container element.\n    if (typeof container === 'string') {\n      container = document.querySelector(container);\n    }\n\n    // Use player wrapper as fallback if container couldn't be resolved.\n    if (!container) {\n      container = player.wrapper;\n    }\n\n    this.player = player;\n    this.container = container;\n    this.mode = mode;\n    this.actions = actions;\n    this.options = options;\n  }\n\n  boundingBoxUtils() {\n    // Get the bounding box for the lottie player or container\n    const { top, height } = this.container.getBoundingClientRect();\n\n    // Calculate current view percentage\n    const current = window.innerHeight - top;\n    const max = window.innerHeight + height;\n    const currentPercent = current / max;\n\n    // Skip if out of viewport\n    if (currentPercent < 0 || currentPercent > 1) {\n      return;\n    }\n    // Find the first action that satisfies the current position conditions\n    const action = this.actions.find(({ start, end }) => currentPercent >= start && currentPercent <= end);\n\n    // Skip if no matching action was found!\n    if (!action) {\n      return;\n    }\n\n    return { currentPercent, action };\n  }\n\n  start() {\n    if (this.mode === 'scroll') {\n      window.addEventListener('scroll', this.#scrollHandler);\n    }\n\n    if (this.mode === 'hover') {\n      this.container.addEventListener('mouseenter', this.#hoverStartHandler);\n      this.container.addEventListener('mouseleave', this.#hoverEndHandler);\n    }\n  }\n\n  stop() {\n    if (this.mode === 'scroll') {\n      window.removeEventListener('scroll', this.#scrollHandler);\n    }\n\n    if (this.mode === 'hover') {\n      this.container.removeEventListener('mouseenter', this.#hoverStartHandler);\n      this.container.removeEventListener('mouseleave', this.#hoverEndHandler);\n    }\n  }\n\n  #hoverStartHandler = () => {\n    try {\n      const { action } = this.boundingBoxUtils();\n\n      if (action.type === 'loop') {\n        if (this.player.isPaused === true) {\n          this.player.playSegments(action.frames, true);\n        }\n      } else if (action.type === 'play') {\n        // Play: Reset segments and continue playing full animation from current position\n        if (this.player.isPaused === true) {\n          this.player.resetSegments();\n        }\n        this.player.playSegments(action.frames);\n      } else if (action.type === 'stop') {\n        // Stop: Stop playback\n        this.player.goToAndStop(action.frames[0]);\n        this.player.stop();\n      }\n    } catch (e) {\n      // console.log('no action within this viewport');\n    }\n  };\n\n  #hoverEndHandler = () => {\n    // Skip if no matching action was found!\n    try {\n      const { action } = this.boundingBoxUtils();\n\n      if (action.type === 'loop') {\n        this.player.stop();\n      } else if (action.type === 'play') {\n        this.player.stop();\n      } else if (action.type === 'stop') {\n        this.player.playSegments(action.frames, true);\n      }\n    } catch (e) {\n      // no action within this viewport\n    }\n  };\n\n  #scrollHandler = () => {\n    try {\n      const { currentPercent, action } = this.boundingBoxUtils();\n\n      // Get lottie instance\n      this.player.loop = true;\n\n      // Process action types:\n      if (action.type === 'seek') {\n        // Seek: Go to a frame based on player scroll position action\n        this.player.playSegments(action.frames, true);\n        this.player.goToAndStop(\n          Math.ceil(((currentPercent - action.start) / (action.end - action.start)) * this.player.totalFrames),\n          true,\n        );\n      } else if (action.type === 'loop') {\n        // Loop: Loop a given frames\n        if (this.player.isPaused === true) {\n          this.player.playSegments(action.frames, true);\n        }\n      } else if (action.type === 'play') {\n        // Play: Reset segments and continue playing full animation from current position\n        if (this.player.isPaused === true) {\n          this.player.resetSegments();\n        }\n        this.player.play();\n      } else if (action.type === 'stop') {\n        // Stop: Stop playback\n        this.player.goToAndStop(action.frames[0]);\n        this.player.stop();\n        // TODO: This is not the way to implement this. Refactor needed!\n      }\n    } catch (e) {\n      // no action within this viewport\n    }\n  };\n}\n\nexport const create = options => {\n  const instance = new LottieInteractivity(options);\n  instance.start();\n\n  return instance;\n};\n\nexport default create;\n"],"names":["DEFAULT_OPTIONS","player","LottieInteractivity","actions","container","mode","options","action","_this","boundingBoxUtils","type","isPaused","playSegments","frames","resetSegments","goToAndStop","stop","e","currentPercent","loop","Math","ceil","start","end","totalFrames","play","_typeof","constructor","name","elem","document","querySelector","nodeName","getLottie","HTMLElement","Error","wrapper","this","getBoundingClientRect","top","height","window","innerHeight","find","addEventListener","removeEventListener","create","instance"],"mappings":"4rCAAA,IAAMA,EAAkB,CACtBC,OAAQ,iBAQGC,8FACoDF,EAAjDG,IAAAA,QAASC,IAAAA,UAAWC,IAAAA,KAAMJ,IAAAA,OAAWK,0FAkF9B,mBAETC,EAAWC,EAAKC,mBAAhBF,OAEY,SAAhBA,EAAOG,MACoB,IAAzBF,EAAKP,OAAOU,UACdH,EAAKP,OAAOW,aAAaL,EAAOM,QAAQ,GAEjB,SAAhBN,EAAOG,OAEa,IAAzBF,EAAKP,OAAOU,UACdH,EAAKP,OAAOa,gBAEdN,EAAKP,OAAOW,aAAaL,EAAOM,SACP,SAAhBN,EAAOG,OAEhBF,EAAKP,OAAOc,YAAYR,EAAOM,OAAO,IACtCL,EAAKP,OAAOe,QAEd,MAAOC,sCAKQ,mBAGPV,EAAWC,EAAKC,mBAAhBF,OAEY,SAAhBA,EAAOG,MAEgB,SAAhBH,EAAOG,KADhBF,EAAKP,OAAOe,OAGa,SAAhBT,EAAOG,MAChBF,EAAKP,OAAOW,aAAaL,EAAOM,QAAQ,GAE1C,MAAOI,sCAKM,qBAEsBT,EAAKC,mBAAhCS,IAAAA,eAAgBX,IAAAA,OAGxBC,EAAKP,OAAOkB,MAAO,EAGC,SAAhBZ,EAAOG,MAETF,EAAKP,OAAOW,aAAaL,EAAOM,QAAQ,GACxCL,EAAKP,OAAOc,YACVK,KAAKC,MAAOH,EAAiBX,EAAOe,QAAUf,EAAOgB,IAAMhB,EAAOe,OAAUd,EAAKP,OAAOuB,cACxF,IAEuB,SAAhBjB,EAAOG,MAEa,IAAzBF,EAAKP,OAAOU,UACdH,EAAKP,OAAOW,aAAaL,EAAOM,QAAQ,GAEjB,SAAhBN,EAAOG,OAEa,IAAzBF,EAAKP,OAAOU,UACdH,EAAKP,OAAOa,gBAEdN,EAAKP,OAAOwB,QACa,SAAhBlB,EAAOG,OAEhBF,EAAKP,OAAOc,YAAYR,EAAOM,OAAO,IACtCL,EAAKP,OAAOe,QAGd,MAAOC,QAzJe,WAAlBS,EAAOzB,IAAmD,kBAA5BA,EAAO0B,YAAYC,KAA2B,IAC1D,iBAAX3B,EAAqB,KACxB4B,EAAOC,SAASC,cAAc9B,GAEhC4B,GAbe,kBAaPA,EAAKG,WACf/B,EAAS4B,EAAKI,kBAEPhC,aAAkBiC,aAhBR,kBAgBuBjC,EAAO+B,WACjD/B,EAASA,EAAOgC,iBAIbhC,QACG,IAAIkC,gBArBG,0DAqBmDlC,GAK3C,iBAAdG,IACTA,EAAY0B,SAASC,cAAc3B,IAIhCA,IACHA,EAAYH,EAAOmC,cAGhBnC,OAASA,OACTG,UAAYA,OACZC,KAAOA,OACPF,QAAUA,OACVG,QAAUA,0EAKS+B,KAAKjC,UAAUkC,wBAA/BC,IAAAA,IAAKC,IAAAA,OAKPtB,GAFUuB,OAAOC,YAAcH,IACzBE,OAAOC,YAAcF,QAI7BtB,EAAiB,GAAKA,EAAiB,QAIrCX,EAAS8B,KAAKlC,QAAQwC,MAAK,gBAAGrB,IAAAA,MAAOC,IAAAA,WAAUL,GAAkBI,GAASJ,GAAkBK,QAG7FhB,QAIE,CAAEW,eAAAA,EAAgBX,OAAAA,oCAIP,WAAd8B,KAAKhC,MACPoC,OAAOG,iBAAiB,WAAUP,SAGlB,UAAdA,KAAKhC,YACFD,UAAUwC,iBAAiB,eAAcP,cACzCjC,UAAUwC,iBAAiB,eAAcP,yCAK9B,WAAdA,KAAKhC,MACPoC,OAAOI,oBAAoB,WAAUR,SAGrB,UAAdA,KAAKhC,YACFD,UAAUyC,oBAAoB,eAAcR,cAC5CjC,UAAUyC,oBAAoB,eAAcR,yFAmF1CS,EAAS,SAAAxC,OACdyC,EAAW,IAAI7C,EAAoBI,UACzCyC,EAASzB,QAEFyB"}