(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global = global || self, global.lottieInteractivity = factory());
}(this, (function () { 'use strict';

  /**
   * LottieFiles interactive scroll for Lottie
   *
   * @author Jawish Hameed <jawish@lottiefiles.com>
   *
   */
  var lottieScroll = function lottieScroll(config) {
    window.addEventListener("scroll", function () {
      var _loop = function _loop(playerId) {
        // Get the lottie player element and lottie reference
        var player = document.getElementById(playerId); // Skip rest if the player element was not found

        if (!player) {
          console.log("Invalid player element specified for ".concat(playerId, ". Skipping..."));
          return "continue";
        } // Get the configured container. Use player as fallback if unconfigured or invalid


        var container = config[playerId].container !== undefined ? document.getElementById(config[playerId].container) : player; // Skip rest if the container element was not found

        if (!container) {
          console.log("Invalid container element specified for ".concat(playerId, ". Skipping..."));
          return "continue";
        } // Get the bounding box for the lottie player or container


        var _container$getBoundin = container.getBoundingClientRect(),
            top = _container$getBoundin.top,
            bottom = _container$getBoundin.bottom,
            height = _container$getBoundin.height; // Calculate current view percentage


        var current = window.innerHeight - top;
        var max = window.innerHeight + height;
        var currentPercent = current / max; // // Skip if out of viewport

        if (currentPercent < 0 || currentPercent > 1) {
          return "continue";
        } // Find the first action that satisfies the current position conditions


        var action = config[playerId].actions.find(function (_ref) {
          var start = _ref.start,
              end = _ref.end;
          return currentPercent >= start && currentPercent <= end;
        }); // Skip if no matching action was found!

        if (!action) {
          return "continue";
        } // Get lottie instance


        var lottie = player.getLottie();
        lottie.loop = true; // Process action types:

        if (action.type === "seek") {
          // Seek: Go to a frame based on player scroll position action
          lottie.playSegments(action.frames, true);
          lottie.goToAndStop(Math.ceil((currentPercent - action.start) / (action.end - action.start) * lottie.totalFrames), true);
        } else if (action.type === "loop") {
          // Loop: Loop a given frames
          if (lottie.isPaused === true) {
            lottie.playSegments(action.frames, true);
          }
        } else if (action.type === "play") {
          // Play: Reset segments and continue playing full animation from current position
          if (lottie.isPaused === true) {
            lottie.resetSegments();
          }

          lottie.play();
        } else if (action.type === "stop") {
          // Stop: Stop playback
          lottie.goToAndStop(action.frames[0]);
          lottie.stop();
        } else if (action.type === "hover") {
          container.addEventListener("mouseenter", function () {
            if (lottie.isPaused === true) {
              lottie.playSegments(action.frames, true);
            }
          });
          container.addEventListener("mouseleave", function () {
            if (lottie.isPaused === false) {
              lottie.pause();
            }
          });
        }
      };

      for (var playerId in config) {
        var _ret = _loop(playerId);

        if (_ret === "continue") continue;
      }
    });
  };

  var main = {
    lottieScroll: lottieScroll
  };

  return main;

})));
